package network.util;

import enums.ClientRole;
import enums.PlayerEnum;
import logic.game.GameInstance;
import org.java_websocket.WebSocket;


/**
 * Class to collect all players in this game.
 * a player can be a player, spectator or AI as specified by the role
 *
 * @author Janine Grimmer
 */
public class Client {
    //Client Identification
    private String clientName;
    ClientRole role;
    int clientID;
    private String clientSecret;
    WebSocket webSocket;
    //flag for connection
    private boolean isConnected;
    //Used to count number of strikes caused by this client
    int strikeCounter = 0;
    //Used to track Timeout
    private long timeOutCounterMillis;
    //private Player playerData;
    private PlayerEnum playerEnum;

    /**
     * Constructor for a Player object.
     *
     * @param clientName name of client to be shown on game screen
     * @param clientID   id of client, given by server
     * @param role       {@link ClientRole} role of client
     * @param webSocket  connection between client and server, {@link WebSocket}
     */
    public Client(String clientName, int clientID, ClientRole role, WebSocket webSocket) {

        this.clientName = clientName;
        this.clientID = clientID;
        this.role = role;
        this.webSocket = webSocket;
        if (role != ClientRole.SPECTATOR) {
            //playerData = new Player(this);
        }
    }

    /**
     * Method to increase number of strikes caused by this client.
     */
    public void increaseStrikeCounter() {
        strikeCounter++;
    }

    /**
     * Constructor for a client object.
     *
     * @param socket {@link WebSocket}
     */
    public Client(WebSocket socket) {
        this.webSocket = socket;
    }

    /**
     * Called to save reconnection code generated by the server.
     *
     * @param clientSecret String, reconnection code
     */
    public void setClientSecret(String clientSecret) {
        this.clientSecret = clientSecret;
    }


    /**
     * Method to find out whether an object is an already known client.
     *
     * @param obj object to be verified
     * @return true if object is a known client, including known name and known client secret
     */
    @Override
    public boolean equals(Object obj) {

        if (!(obj instanceof Client)) {
            return false;
        }
        Client other = (Client) obj;
        if (!this.clientName.contentEquals(other.clientName)) {
            return false;
        }
        if (!this.clientSecret.contentEquals(other.clientSecret)) {
            return false;
        }
        return true;
    }
    @Override
    public String toString(){
        return "[" + clientName + ", " + clientID + ", " + role + ", " + clientSecret +"]";
    }
    /**
     * Method to set role of client
     *
     * @param role {@link ClientRole}
     */
    public void setRole(ClientRole role) {
        this.role = role;
        if (role != ClientRole.SPECTATOR) {
            //playerData = new Player(this);
        }
    }

    /**
     * Called to set a name for this client
     *
     * @param clientName string, chosen name of client
     */
    public void setClientName(String clientName) {
        this.clientName = clientName;
    }

    /**
     * Called to set connection for client.
     *
     * @param socket {@link WebSocket}
     */
    public void setWebSocket(WebSocket socket) {
        this.webSocket = socket;
    }

    /**
     * Method to get role of client
     *
     * @return {@link ClientRole}
     */
    public ClientRole getRole() {
        return role;
    }

    /**
     * Method to get ID of client
     *
     * @return positive and unique integer
     */
    public int getClientID() {
        return clientID;
    }

    /**
     * Method to set ID of client
     *
     * @param clientID positive and unique integer
     */
    public void setClientID(int clientID) {
        this.clientID = clientID;
    }

    /**
     * Method to get websocket / connection of client
     *
     * @return {@link WebSocket}
     */
    public WebSocket getWebSocket() {
        return webSocket;
    }

    /**
     * Called to get number of strikes caused by this client
     *
     * @return integer, number of strikes
     */
    public int getStrikeCounter() {
        return strikeCounter;
    }

    /**
     * Returns a player object if the client plays actively.
     *
     * @return {@link Player} or null if the client is spectator
     */
    public PlayerEnum getPlayerEnum() {
        return playerEnum;
    }


    /**
     * Called to retrieve reconnection code after connection was lost to the server.
     *
     * @return string, reconnection code
     */
    public String getClientSecret() {
        return clientSecret;
    }


    /**
     * Called to get name of client.
     *
     * @return name of client, string
     */
    public String getClientName() {
        return clientName;
    }

    /**
     * Called to check whether client has a connection to the server or not.
     *
     * @return true if connected, false otherwise
     */
    public boolean isConnected() {
        if(webSocket == null){
            return false;
        }
        return webSocket.isOpen();
    }

    /**
     * Called to set connection flag.
     *
     * @param connected true if connected, false otherwise
     */
    public void setConnected(boolean connected) {
        isConnected = connected;
    }

    /**
     * Called to get the time until this client must respond to a server request.
     *
     * @return long, time to respond
     */
    public long getTimeOutCounterMillis() {
        return timeOutCounterMillis;
    }

    /**
     * Used to set time to react to an incoming message.
     *
     * @param timeOutCounterMillis long, time to react with a message
     */
    public void setTimeOutCounterMillis(long timeOutCounterMillis) {
        this.timeOutCounterMillis = timeOutCounterMillis;
    }

    /**
     *
     * @param playerEnum
     */
    public void setPlayerEnum(PlayerEnum playerEnum) {
        this.playerEnum = playerEnum;
    }
}
